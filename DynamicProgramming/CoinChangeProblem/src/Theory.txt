//Coin Change Problem
//Given a set of coins v[] . For example {1,2,3}
//Given an amount M -> The total
//In how many ways can the coins v[] be combined in order to get the total M ?
//The order of coins does not matter.
//This is the coin change problem.

//Coins v[] -> {1,2,3}
//Total amount M -> 4
//Solution to the coin change problem is {1,1,1,1} , {2,2} , {1,3} , {1,1,2}.
//The order of coins does not matter !!!
// {1,3} = {3,1}
//Thus there are four (4) ways in which the coins can be combined to ge the total 4(M).


//Can be solved in two ways -> 1. Recursion &  2. Dynamic Programming

//RECURSIVE METHOD
//For every single coin we have 2 options: include it in our solution or not!
//The problem with this is that there are overlapping sub-problems.
//This recursive solution has exponential running time -> O(2^n) where n is the number of coins.
// 2^n because for every coin we have two(2) options: include it or not


//DYNAMIC PROGRAMMING APPROACH
// Step 1 : Create a solution matrix:
//                          dpTable[numOfCoins + 1][totalAmount + 1]
//                                      "rows"           "columns"
// Step 2 : Define the base cases:
//                        --- if(totalAmount is 0) -> there is 1 way to make the change!
//                                                    Because we do not include any coin
//                        --- if(numOfCoins is 0)  -> there is 0 ways to change the amount!
//                                                    No solution...
//
// Complexity: O(v*M) where v is the number of coins and M is the total amount.
// Step 3 : For every coin we have to decide whether to include it or not.
//          Check if the coin's value is less than or equal to the amount needed.
//            if (YES) -> We find ways by including that coin and excluding that coin.
//              1) "Include" that coin : reduce the amount M by that coin's value and use the sub-problem solution.
//                                       totalAmount - v[i]
//              2) "Exclude" that coin : solution for the same amount without considering that coin

//Equation for step 3:
//
//                              |-                          0 if i=0 (2)  //if there are no coins there is no sol.
//                              |                           1 if j=0 (2)  //If the amount is 0 then there is 1 sol.
//              dpTable[i][j] = |       dpTable[i-1][j] + dpTable[i][j-v[i-1]]   if v'i <= j  (3)
//                   (1)        |                   dpTable[i-1][j]   if v[i] > j             (4)
//                              |-
//
//Explanation of the equation :
// (1) above : In how many ways can the first i coins be combined to get the total j ?
// (2) above : Base cases
// (3) above : If the coin value is smaller than the amount we can consider the coin.
// (4) above : If the coin value is greater than the amount we cannot consider that coin.

// What does the equation mean simply ?
// if (v[i] > j) -> Copy the content of the box above the current
// else -> dpTable[i][j] = value of box above the current  + (value in the same row - v[i])

//Concrete example
//M = 4                                         numOfColumns = M + 1
//v[] = {1,2,3}                                 numOfRows    = v.length + 1
//
//
//                             M=0         M=1          M=2        M=3         M=4       (totals)
//                      ------------------------------------------------------------
//(Take no coins)     0 |       1           0           0           0           0
//(Take 1)            1 |       1           1           1           1           1
//(Take 1 or 2)       2 |       1           1           2           2           3
//(Take 1 or 2 or 3)  3 |       1           1           2           3           4
//                 (coins)

//                      dpTable[2][2] = dpTable[1][2] + dpTable[2][0]










