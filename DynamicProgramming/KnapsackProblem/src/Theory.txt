// It is a problem in combinatorial optimization

// Given a set of items, each with a mass m and value v, determine the number of each items to include in a...
// collection so that the total mass M is less than ot equal to a given limit and the total value V is as large
// as possible.

// The problem often arises in resource allocation where there are financial constraints
// Selection of investments or portfolios. Finding the least wasteful way to extract raw materials.

//There are two important types of knapsack problems

//DIVISIBLE Problem
//If we can take fractions of the given items then the greedy approach can be used.
//Sort the items according to their values. It can be done in O( n * log n ) time. Using Merge/Quick Sort.
//Start by taking as much as possible of the most valuable item.
//Try with the next item form our sorted list.
// This linear search has O(n) time complexity.
// Overall complexity = O(n * log n) + O(n) = O(n * log n)

// 0-1 KNAPSACK PROBLEM
// We are not able to take fractions. We have to decide whether to take an item or not.
// Greedy alg. not optimal.
// DP is the right way.

//DP way
// Solves the larger problem by relating it to overlapping sub-problems and then solves the sub-problems.
// It works through the exponential set of solutions but does not examine them all explicitly.
// Uses MEMOIZATION (Storing intermediate results so as to avoid re-computation).

//----------------------------------------------
// Problem through mathematical formulation...
// x'i  items we have // we have N items
// v'i value of the i-th item
// w'i weight of the i-th item
// W maximum capacity of the knapsack
//-----------------------------------------------

// Maximise SUMMATION(1 to N) of (v'i * x'i) subject to SUMMATION(1 to N) of (w'i * x'i) <= W
//                                    |                                           |
//                                 "Profit"                                  "Constraint"
// x'i : 0 if we take the i-th item , 1 if we take it.

// Sub-problems: we have N items so we have to make N decisions (whether to take the item at a given index or not)
// Sub-problems: solution considering every possible combination of remaining items and remaining weight.
// S[i][w] : the solution to the sub-problem corresponding to the first i items and available weight w.
// or in other words...
// S[i][w] : The maximum cost of items that fit inside a knapsack of weight w , choosing from i items.
// We have to decide whether to take the item or not.

// Formula we are going to use ...
// S[i][w] = Math.max( S[i-1][w]  ; v'i + S[i-1][w - w'i] )
//                          |               |
//                  do not take i-th      take i-th
//
// We only consider S[i-1][w - w'i] if we can fit w >= w'i
// If there is no room for it the answer is just. S[i-1][w] !!!


// Running time of knapsack : O(n*W)
// It is pseudo polynomial
// A Numeric algorithm runs in pseudo-polynomial time if it is running time is polynomial in the numeric value of
// the input but is the exponential  in the length of the input

// N = 3 (items)  and  W = 5kg  (capacity of the knapsack)
// item #1       w'1 = 4kg       v'1 = $10
// item #2       w'1 = 2kg       v'1 = $4
// item #3       w'1 = 3kg       v'1 = $7

// Number of columns = Capacity + 1
// Number of rows = Items + 1
// Each entry in the table is the sum of the values for the max weight w
//                              0       1       2       3       4       5       weights[kg]
//                          --------------------------------------------------
//     No of items      0   |   0       0       0       0       0       0
//      First item      1   |   0       0       0       0       10      10
// First two items      2   |   0       0       4       4       10      10
//       All Items      3   |   0       0       4       7       10      11

// Fill this table using this => S[i][w] = Math.max( S[i-1][w]  ; v'i + S[i-1][w - w'i] )
//      S[2][1] = Math.max( S[1][1] ) ; 4 + S[1][1-2]) = max(0,0)
//      S[2][2] = Math.max( S[1][1] ) ; 4 + S[1][2-2]) = max(0,4)
//      Similarly use this formula for all items..


// SOLUTION : Value in the last row and the last column .. We can make $11 from the 2nd and 3rd item.
// Go one step above to (2,5) .. Here The value 11 != 10 . //  So include. That is the last item (3Kg).
// So go three steps to the left... 5 - 3 ... So three steps.
// We arrive at (2,2).
// We go up to (1,2) value at this cell 4 != 0  . include the second item (2Kg).
// We go two steps to the left and arrive at (1,0).
// The value is 0 . END OF ALGORITHM!!!!





