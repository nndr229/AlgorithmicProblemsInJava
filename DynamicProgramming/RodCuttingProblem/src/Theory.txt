//Rod Cutting Problem...
//Given a rod of length "l".
//Given prices of different lengths.
//How to cut the rod to maximise profit ?
//This is the rod cutting problem.

//Rod length -> l = 5m

//Prices for different lengths
//  1m -> $2
//  2m -> $5
//  3m -> $7
//  4m -> $3

//Solution to the rod cutting problem:
//{2,3}
//Cut the rod to get a piece of 2m and a piece of 3m
//Profit $12
//OR
//{2,2,1}
//Cut the rod to get two pieces of 2m  and one piece of 1m.
//Same Profit of $12.
//Two solutions with value $12.

//RECURSIVE SOLUTION
//The naive approach is to use a simple recursive method
//In a rod of length N , N-1 cuts can be made.
//So there are 2^(N-1) ways to cut the rod.
//Problems with this implementation: Time complexity + Overlapping sub-problems.
//Exponential time complexity: O(2^N) where N is the length of the rod
//For every length we have 2 options: whether to cut or not.


//DYNAMIC PROGRAMING SOLUTION
//Step 1: Create a solution matrix:
//                    dpTable[numOfLengths + 1][originalLength + 1]
//Step 2: Define the base cases:
//                    If originalLength is 0 -> Profit is 0 (as there is no rod to cut).
//                    If we don't consider any lengths -> 0 is the profit.
//Complexity: O(numOfLengths * originalLength)


//                    |-
//                    |                    0 if i = 0 and 0 if j = 0 ----(2)
//    dpTable[i][j] = |     max{dpTable[i-1][j] ; prices[i] + dpTable[i][j-i]} if i<=j
//        (1)         |                     dpTable[i-1][j] if i > j  -----(3)
//                    |-

// (1) The total value when total length is j and we have the first i pieces Or i is the length of the actual piece
//     and j is the length of the given rod...
// (2) The base cases
// (3) If the piece is greater than the length of the rod we skip it
//
//      Consider max{ dpTable[i-1][j] ; prices[i] + dpTable[i][j-i]} if i<=j
//                            |                      |
//                            |                      |
//                       Not to Cut              Cut the rod



//Rod cutting problem example
// l=5m
// 0m -> $0; 1m -> $2; 2m -> $5; 3m -> $7; 4m -> $3;
// prices = {0,2,5,7,3}
// numOfColumns = l + 1
// numOfRows = prices.length + 1
//
//                             0m          1m          2m          3m          4m          5m      (lengths)
//                       __________________________________________________________________________
//  No cuts     0m [$0]  |      0           0           0           0           0           0
//  Just One    1m [$2]  |      0           2           4           6           8           10
//  First Two   2m [$5]  |      0           2           5           7           10          12
// First Three  3m [$7]  |      0           2           5           7           10          12
//     All      4m [$3]  |      0           2           5           7           10          12
//              (pieces)
//
//          lets look at dpTable[2][1] = dpTable[2-1][1];  as i>j
//                       dpTable[2][2] = max{ dpTable[2-1][2] ; 5 + dpTable[2][2-2]}  i <= j
//                                          ...
//                       dpTable[2][5] = max{ dpTable[2-1][5] ; 5 + d[Table[2][5-2]}  i <= j


// Ok! so we can conclude that the profit is $12.
// But what are the optimal cuts ???
// [4][5] == [3][5] ... These 2 cells are the same ... So no 4m cuts in the solution.
// Go upward to [3][5]
// [3][5] == [2][5] ... These 2 cells are the same ... So there is no 3m cut in the solution.
// Go upward to [2][5]
// [2][5] != [1][5] ... So it is not coming from above. """There is a 2m cut in the solution."""
// To find the next cut. GO 2  steps to the left from [2][5] ...
// [2][3] != [1][3] ... These 2 cells are not the same."""So we have to include the 2m cut in the solution again!"""
// To find the next cut. GO 2  steps to the left from [2][3] ...
// [2][1] == [1][1] ... These 2 cells are the same ... So no more 2m cuts in the solution.
// [1][1] != [0][1] ... These 2 cells are not the same... """So we have to include 1m cut in the solution..."""
// Repeating similar steps we end up at a cell with value 0 . End of algorithm...

// Solution : CUTS {2m, 2m ,1m}
//          : PROFIT { $12 }







